"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[786],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),o=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=o(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var o=2;o<s;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5493:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return o}});var r=n(3117),a=(n(7294),n(3905));const s={},i="Cards",c={unversionedId:"specs/banking/cards",id:"specs/banking/cards",title:"Cards",description:"The cards page is presented differently based on the user's account membership settings, so let's review the GraphQL queries first.",source:"@site/docs/specs/banking/cards.md",sourceDirName:"specs/banking",slug:"/specs/banking/cards",permalink:"/swan-partner-frontend/specs/banking/cards",draft:!1,editUrl:"https://github.com/swan-io/swan-partner-frontend/edit/main/docs/docs/specs/banking/cards.md",tags:[],version:"current",frontMatter:{},sidebar:"specs",previous:{title:"Transfer",permalink:"/swan-partner-frontend/specs/banking/transfer"},next:{title:"Members",permalink:"/swan-partner-frontend/specs/banking/members"}},l={},o=[{value:"GraphQL queries",id:"graphql-queries",level:2},{value:"With account access",id:"with-account-access",level:3},{value:"No account access",id:"no-account-access",level:3},{value:"Card list views",id:"card-list-views",level:2},{value:"No cards",id:"no-cards",level:3},{value:"Single card",id:"single-card",level:3},{value:"Multiple cards",id:"multiple-cards",level:3}],u={toc:o},p="wrapper";function d(e){let{components:t,...s}=e;return(0,a.kt)(p,(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cards"},"Cards"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"cards")," page is presented differently based on the user's account membership settings, so let's review the GraphQL queries first."),(0,a.kt)("h2",{id:"graphql-queries"},"GraphQL queries"),(0,a.kt)("h3",{id:"with-account-access"},"With account access"),(0,a.kt)("p",null,"The following query works if the user can access the account (",(0,a.kt)("inlineCode",{parentName:"p"},"canViewAccount"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),")."),(0,a.kt)("p",null,"Retrieve all the account cards using the root ",(0,a.kt)("inlineCode",{parentName:"p"},"cards")," query field and an ",(0,a.kt)("inlineCode",{parentName:"p"},"accountId")," filter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  cards(filters: {accountId: $CURRENT_ACCOUNT_ID}) {\n    # ....\n  }\n}\n")),(0,a.kt)("h3",{id:"no-account-access"},"No account access"),(0,a.kt)("p",null,"The following query works if the user doesn't have view access to the account (",(0,a.kt)("inlineCode",{parentName:"p"},"canViewAccount"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,a.kt)("p",null,"Retrive cards attached only to their membership:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  accountMembership(id: $CURRENT_ACCOUNT_MEMBERSHIP_ID) {\n    cards {\n      # ...\n    }\n  }\n}\n")),(0,a.kt)("h2",{id:"card-list-views"},"Card list views"),(0,a.kt)("p",null,"The view of the card list changes based on how many cards are displayed."),(0,a.kt)("h3",{id:"no-cards"},"No cards"),(0,a.kt)("p",null,"If the ",(0,a.kt)("strong",{parentName:"p"},"query returns no cards"),", provide a way for users to add a card.\nNo other content is needed in the body of the page."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot of the cards page when query returns zero cards",src:n(8242).Z,width:"2920",height:"1874"})),(0,a.kt)("h3",{id:"single-card"},"Single card"),(0,a.kt)("p",null,"If the ",(0,a.kt)("strong",{parentName:"p"},"query returns a single card"),", the body of the page should include the following content:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tabs for ",(0,a.kt)("strong",{parentName:"li"},"virtual cards"),", ",(0,a.kt)("strong",{parentName:"li"},"physical cards"),", ",(0,a.kt)("strong",{parentName:"li"},"mobile payments"),", and ",(0,a.kt)("strong",{parentName:"li"},"transactions")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Large image")," of the card with all card details (such as cardholder name, card number)"),(0,a.kt)("li",{parentName:"ul"},"Card's ",(0,a.kt)("strong",{parentName:"li"},"spending limit")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Remaining amount available")," to be spent over the next 30 days")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot of the cards page when query returns one card",src:n(1654).Z,width:"2920",height:"1874"})),(0,a.kt)("h3",{id:"multiple-cards"},"Multiple cards"),(0,a.kt)("p",null,"If the ",(0,a.kt)("strong",{parentName:"p"},"query returns multiple cards"),", the body of the page should include the following content in a list format:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Button to add a new card"),(0,a.kt)("li",{parentName:"ul"},"Filters for ",(0,a.kt)("strong",{parentName:"li"},"status")," and ",(0,a.kt)("strong",{parentName:"li"},"format")),(0,a.kt)("li",{parentName:"ul"},"List of cards",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Small image of the card"),(0,a.kt)("li",{parentName:"ul"},"Full name and card format"),(0,a.kt)("li",{parentName:"ul"},"Card name"),(0,a.kt)("li",{parentName:"ul"},"Spending limit (remaining balance over total spending limit)")))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot of the cards page when query returns multiple cards",src:n(2837).Z,width:"2920",height:"1874"})))}d.isMDXComponent=!0},8242:function(e,t,n){t.Z=n.p+"assets/images/cards-empty-e4d07caff3339971ca371a10d5b5a5e0.png"},2837:function(e,t,n){t.Z=n.p+"assets/images/cards-multiple-f12fbe29ba5be370fbd7911e0930c322.png"},1654:function(e,t,n){t.Z=n.p+"assets/images/cards-single-bc7d26421769cd8fa1fe4352dfb2dbba.png"}}]);