"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[801],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(h,i(i({ref:n},s),{},{components:t})):r.createElement(h,i({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6279:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});var r=t(3117),a=(t(7294),t(3905));const o={title:"GraphQL",sidebar_label:"GraphQL"},i=void 0,l={unversionedId:"graphql",id:"graphql",title:"GraphQL",description:"Swan exposes a GraphQL API, which you can try on the GraphQL Explorer.",source:"@site/docs/graphql.md",sourceDirName:".",slug:"/graphql",permalink:"/swan-partner-frontend/graphql",draft:!1,editUrl:"https://github.com/swan-io/swan-partner-frontend/edit/main/docs/docs/graphql.md",tags:[],version:"current",frontMatter:{title:"GraphQL",sidebar_label:"GraphQL"},sidebar:"docs",previous:{title:"Repository",permalink:"/swan-partner-frontend/repository"},next:{title:"Production build",permalink:"/swan-partner-frontend/build"}},p={},c=[{value:"Schemas",id:"schemas",level:2},{value:"Documents",id:"documents",level:2},{value:"Codegen",id:"codegen",level:2}],s={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Swan exposes a ",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," API, which you can try on the ",(0,a.kt)("a",{parentName:"p",href:"https://explorer.swan.io/"},"GraphQL Explorer"),"."),(0,a.kt)("h2",{id:"schemas"},"Schemas"),(0,a.kt)("p",null,"In order to update the GraphQL schemas, you can run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ yarn graphql-update-schemas\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In order for Continous Integration (CI) to be deterministic, the schemas are versioned in the repository")),(0,a.kt)("h2",{id:"documents"},"Documents"),(0,a.kt)("p",null,"All the documents are in each applications ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="clients/banking/src/graphql/partner.gql"',title:'"clients/banking/src/graphql/partner.gql"'},"query ConsentCallbackPage($consentId: ID!) {\n  consent(id: $consentId) {\n    id\n    status\n  }\n}\n\n# ...\n")),(0,a.kt)("h2",{id:"codegen"},"Codegen"),(0,a.kt)("p",null,"In order to benefit from GraphQL's types, we use ",(0,a.kt)("a",{parentName:"p",href:"https://the-guild.dev/graphql/codegen"},"GraphQL Codegen"),"."),(0,a.kt)("p",null,"We can run the codegen using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ yarn graphql-codegen\n")),(0,a.kt)("p",null,"Using our previous example, it will generate a ",(0,a.kt)("inlineCode",{parentName:"p"},"partner.ts")," file next to the document one, which we can import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { ConsentCallbackPage } from "../graphql/partner";\n\nconst MyComponent = () => {\n  const [{ data }] = useUrqlQuery({ query: ConsentCallbackPageDocument });\n  // `data` is a typed object\n  // ...\n};\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Generated files are ",(0,a.kt)("strong",{parentName:"p"},"not versioned")," to avoid unnecessary conflicts, they're instead generated on the CI.")))}d.isMDXComponent=!0}}]);